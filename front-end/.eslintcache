[{"/home/antreas/Hardeng/front-end/src/ChargingExperience.js":"1","/home/antreas/Hardeng/front-end/src/UserInfo.js":"2","/home/antreas/Hardeng/front-end/src/Payment.js":"3","/home/antreas/Hardeng/front-end/src/EditUserInfo.js":"4","/home/antreas/Hardeng/front-end/src/Header.js":"5","/home/antreas/Hardeng/front-end/src/API.js":"6","/home/antreas/Hardeng/front-end/src/Map.js":"7","/home/antreas/Hardeng/front-end/src/EnergyMonitoring.js":"8","/home/antreas/Hardeng/front-end/src/LoginForm.js":"9","/home/antreas/Hardeng/front-end/src/Home.js":"10","/home/antreas/Hardeng/front-end/src/index.js":"11"},{"size":13476,"mtime":1615630939595,"results":"12","hashOfConfig":"13"},{"size":3348,"mtime":1615631086455,"results":"14","hashOfConfig":"13"},{"size":3490,"mtime":1615759049244,"results":"15","hashOfConfig":"13"},{"size":9064,"mtime":1615648964205,"results":"16","hashOfConfig":"13"},{"size":551,"mtime":1614179479857,"results":"17","hashOfConfig":"13"},{"size":6945,"mtime":1615630939594,"results":"18","hashOfConfig":"13"},{"size":8516,"mtime":1615559160272,"results":"19","hashOfConfig":"13"},{"size":25295,"mtime":1615558795742,"results":"20","hashOfConfig":"13"},{"size":4729,"mtime":1615376998258,"results":"21","hashOfConfig":"13"},{"size":2703,"mtime":1615758968098,"results":"22","hashOfConfig":"13"},{"size":968,"mtime":1615759023063,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"hl5qnz",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/antreas/Hardeng/front-end/src/ChargingExperience.js",["48"],"import React, { useState } from 'react';\nimport UserInfo from './UserInfo';\nimport Payment from './Payment';\nimport M from 'materialize-css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet'\nimport L from 'leaflet'\nimport { getStations, postInitiateSession, getDriverCars, getDriverPolicies, logSession } from './API';\nimport { FaCarBattery, FaCartPlus } from \"react-icons/fa\";\nimport 'leaflet/dist/leaflet.css';\nimport './ChargingExperience.css';\n\nimport image from './icons/ChargingExperience.jpg';\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport person from './icons/black-marker.png';\n\nvar locationIcon = L.icon({\n  iconUrl: person,\n  shadowUrl: iconShadow,\n  iconSize: [36, 36],\n  iconAnchor: [18, 36]\n});\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  iconRetinaUrl: iconRetina,\n  shadowUrl: iconShadow,\n  iconSize: [24, 36],\n  iconAnchor: [12, 36]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst Athens = [37.983810, 23.727539];\nconst pricesHardcoded = [10, 20, 30, 40, 50, 60];\nconst vehiclesHardcoded = [\n  {BrandName:\"Honda Civic\", Model: \"e-soul\", CarID:1},\n  {BrandName:\"Renault Scenic\", Model:\"e-soul\", CarID:2}\n];\nconst stationsHardcoded = [\n  { position: [37.983810, 23.727539], label: \"Athens\", station_id: 1 },\n  { position: [40.629269, 22.947412], label: \"Thessaloniki\", station_id: 2 }\n];\nconst policiesHardcoded = [\n  {PricePolicyID: 1, KWh: 5, CostPerKWh: 200},\n  {PricePolicyID: 2, KWh: 6, CostPerKWh: 300}\n]\n\nfunction LocationMarker(props) {\n  const [position, setPosition] = useState(null)\n  const map = useMapEvents({\n    click() {\n      map.locate();\n    },\n\n    locationfound(e) {\n      setPosition(e.latlng);\n      props.setter(e.latlng);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  })\n\n  return position === null ? null : (\n    <Marker position={position} icon={locationIcon}>\n      <Popup>You are here</Popup>\n    </Marker>\n  )\n}\n\nclass ChargingExperience extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      driverKey: localStorage.getItem(\"driverKey\"),\n      driverID: localStorage.getItem(\"driverID\"),\n\n      stations: [],\n      prices: pricesHardcoded,\n      vehicles: vehiclesHardcoded,\n      policies: policiesHardcoded,\n      \n      currentPos: null,\n      \n      sessionStarted: false,\n      chosenIndex: null,\n      stationID: null,\n      vehicleID: null,\n      stationPointID: null,\n      pricePolicy: null,\n      pricePolicyID: null,\n      payment: null,\n      \n      session: {\n        startedOn: null,\n        finishedOn: null,\n        energyDelivered: null,\n        payment: null,\n        chargingPointId: null,\n        pricePolicyId: null,\n        carId: null,\n        driverId: null\n      },\n      \n      zoom: 10,\n      error: null,\n      sessionError: null\n    };\n\n    this.getDate = this.getDate.bind(this);\n    this.formatZero = this.formatZero.bind(this);\n    this.initiateSession = this.initiateSession.bind(this);\n    this.finishSession = this.finishSession.bind(this);\n    this.setPayment = this.setPayment.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.showMarkers = this.showMarkers.bind(this);\n    this.showOptions = this.showOptions.bind(this);\n    this.handleLocation = this.handleLocation.bind(this);\n  }\n\n  formatZero(xx) {\n    if(xx < 10) {\n      return '0' + xx;\n    }\n    else{\n      return xx;\n    }\n  }\n  getDate(){\n    var time = new Date();\n    \n    var year = time.getFullYear();\n    var month = this.formatZero(time.getMonth() + 1);\n    var day = this.formatZero(time.getDate());\n    var hour = this.formatZero(time.getHours());\n    var minute = this.formatZero(time.getMinutes());\n    var seconds = this.formatZero(time.getSeconds());\n\n    var ans = year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + seconds;\n\n    return ans;\n  }\n  finishSession(e, payment_type) {\n    e.preventDefault();\n\n    var newSession = this.state.session;\n    newSession.energyDelivered = this.state.payment / this.state.pricePolicy ;\n    newSession.finishedOn = this.getDate();\n    newSession.payment = payment_type;\n\n    console.log(newSession);\n\n    this.setState({\n      session: newSession\n    }, () => {\n      logSession(this.state.driverKey, this.state.session)\n        .then(res => {\n          window.location.reload();\n        })\n        .catch(err => {\n          if(err.response){\n            M.toast({html: 'LogSession Error ' + err.response.status, classes:\"purple darken-4 yellow-text\"});\n          }\n          else{\n            M.toast({html: 'LogSession Error undefined', classes:\"purple darken-4 yellow-text\"});\n          }\n        });\n    });\n  }\n  initiateSession(e){\n    e.preventDefault();\n\n    const station = this.state.stationID;\n    const vehicle = this.state.vehicleID;\n    const payment = this.state.payment;\n    const policy = this.state.pricePolicy;\n    var newError = null;\n\n    if(station === null || vehicle === null || payment === null || policy === null) {\n      newError = \"All fields required\";\n    }\n    else if(this.state.driverKey === null) {\n      newError = \"Not logged in\";\n    }\n    else {\n      postInitiateSession(this.state.driverKey, station)\n        .then(res => {\n          console.log(res);\n\n          var session = this.state.session;\n          session.startedOn = this.getDate();\n          session.chargingPointId = res.data;\n          session.carId = this.state.vehicleID;\n          //session.payment = this.state.payment;\n          session.pricePolicyId = this.state.pricePolicyID;\n          session.driverId = this.state.driverID;\n    \n          this.setState({\n            sessionError: null,\n            sessionStarted: true,\n            session: session,\n          });\n        })\n        .catch(err => {\n          if(err.response) {\n            newError = \"Error \" + err.response.status;\n          }\n          else{\n            console.log(err);\n          }\n        })\n    }\n\n    if(newError !== null){\n      this.setState({sessionError: newError});\n      M.toast({html: 'InitiateSession ' + newError, classes:\"purple darken-4 yellow-text\"});\n    }\n  }\n  setPayment(p){\n    var newSession = this.state.session;\n\n    newSession.payment = p;\n\n    this.setState({session: newSession});\n  }\n  showMarkers() {\n    var i = this.state.chosenIndex;\n\n    if (i === null) {\n      return (this.state.stations.map(({ position, label }, index) => <Marker key={index} value={label} position={position}></Marker>));\n    }\n\n    else {\n      var station = this.state.stations[i];\n      return (<Marker key={i} value={station.label} position={station.position}></Marker>);\n    }\n  }\n  showOptions() {\n    return (\n      this.state.stations.map(({ label, id}, index) => <option value={index}> {label} </option>)\n    );\n  }\n  handleSelect(e) {\n    if(e.target.name === \"stationID\"){\n      if(e.target.value === \"all\") {\n        this.setState({ chosenIndex: null, stationID: null });\n      }\n      else {\n        this.setState({ chosenIndex: e.target.value });\n        const s = this.state.stations;\n        const c = e.target.value;\n\n        this.setState({ stationID: s[c].station_id });\n        \n      }\n    }\n    else if(e.target.name === \"pricePolicyID\"){\n      const index = e.target.value;\n      this.setState({pricePolicyID: this.state.policies[index].PricePolicyID, pricePolicy: this.state.policies[index].CostPerKWh})\n    }\n    else {\n      this.setState({[e.target.name]: e.target.value});\n    }\n  }\n  handleLocation(latlng) {\n    this.setState({\n      currentPos: latlng\n    }, () => {\n      getStations(this.state.driverKey, latlng)\n        .then(res => { \n          console.log(res.data);\n          this.setState({ stations: res.data }) })\n        .catch(err => { \n          if(err.response){\n            this.setState({ error: err.response.status });\n            M.toast({html: 'GetStations Error ' + this.state.error, classes:\"purple darken-4 yellow-text\"});\n          }\n        })\n    });\n  }\n  componentDidMount() {\n    M.AutoInit();\n\n    // Fetch user's cars and price policies\n    if(this.state.driverKey !== null){\n      getDriverCars(this.state.driverKey, this.state.driverID)\n        .then(res => {this.setState({vehicles: res.data[\"Cars\"]})})\n        .catch(err => {\n          if(err.response){\n            M.toast({html: 'GetCars Error ' + err.response.status, classes:\"purple darken-4 yellow-text\"});\n          }\n          else{\n            M.toast({html: 'GetCars Error undefined', classes:\"purple darken-4 yellow-text\"});\n          }\n        })\n      \n      getDriverPolicies(this.state.driverKey, this.state.driverID)\n        .then(res => {this.setState({policies: res.data[\"PricePolicies\"]})})\n        .catch(err => {\n          if(err.response){\n            M.toast({html: 'GetPolicies Error ' + err.response.status, classes:\"purple darken-4 yellow-text\"});\n          }\n          else{\n            M.toast({html: 'GetPolicies Error undefined', classes:\"purple darken-4 yellow-text\"});\n          }\n        })\n    }\n  }\n\n  render() {\n    return (\n      <div \n      className=\"row\"\n      style={{ \n        backgroundImage: `url(${image})`,\n        backgroundRepeat: 'no-repeat',\n        height: '1000px',\n        backgroundAttachment: 'fixed',\n        backgroundSize: '100% 100%',}}\n      >\n        {false && <button onClick={e => {console.log(this.state)}}> State </button>}\n        <div className=\"col s2\">\n          <UserInfo />\n        </div>\n        <div className=\"col s10\">\n          <div className=\"card\">\n            <MapContainer\n              className='map'\n              center={Athens}\n              zoom={this.state.zoom}\n            >\n              <TileLayer\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              />\n              {this.showMarkers()}\n              <LocationMarker setter={this.handleLocation} />\n            </MapContainer>\n\n            <form onSubmit={this.initiateSession}>\n              <div className=\"\">\n                <select name=\"stationID\" className=\"browser-default\" onChange={this.handleSelect}>\n                  <option value=\"\" disabled selected>Choose station ...</option>\n                  <option value=\"all\">Show all stations</option>\n                  {this.state.stations.map(({label}, index) => <option value={index}> {label} </option>)}\n                </select>\n                <select name=\"payment\" className=\"browser-default\" onChange={this.handleSelect}>\n                  <option value=\"\" disabled selected>Payment amount</option>\n                  {this.state.prices.map(price => <option value={price}> {price} </option>)}\n                </select>\n                <select name=\"vehicleID\" className=\"browser-default\" onChange={this.handleSelect}>\n                  <option value=\"\" disabled selected>Choose car</option>\n                  {this.state.vehicles.map(({CarID, BrandName, Model}) => <option value={CarID}> {BrandName + ' ' + Model} </option>)}\n                </select>\n                <select name=\"pricePolicyID\" className=\"browser-default\" onChange={this.handleSelect}>\n                  <option value=\"\" disabled selected>Choose policy</option>\n                  {this.state.policies.map(({CostPerKWh}, index) => <option value={index}> {CostPerKWh + '€ per KWh'} </option>)}\n                </select>\n                <div className=\"center-align\">\n                  <button\n                    className=\"btn-flat green-text\"\n                    type=\"submit\"\n                    >\n                    Initiate Session <FaCarBattery/> \n                  </button>\n                </div>\n              </div>\n            </form>\n\n            <div className=\"center-align\">\n              <Payment \n                disabled={!this.state.sessionStarted} \n                payment={this.state.payment}\n                doNext={(e, t) => this.finishSession(e, t)} \n              />\n            </div>\n            <div className=\"center-align\">\n              <button \n                blue-text\n                disabled={!this.state.sessionStarted} \n                className=\"btn-flat\"\n                onClick={e => {this.finishSession(e, 'unpaid')}}\n                >\n                Charge Tab <FaCartPlus/>\n              </button>\n            </div>\n            \n            {this.state.chosenIndex !== null && false && (\n              <table className=\"centered white\">\n              <thead>\n                <tr>\n                  <th>Location</th>\n                  <th>Condition</th>\n                  <th>Required Time</th>\n                </tr>\n              </thead>\n\n              <tbody>\n                <tr>\n                  <td>{this.state.stations[this.state.chosenIndex].label}</td>\n                  <td>{this.state.stations[this.state.chosenIndex].condition}</td>\n                  <td>{this.state.stations[this.state.chosenIndex].time}</td>\n                </tr>\n              </tbody>\n            </table>\n            )\n            }\n          </div>\n        </div>\n\n        {false &&<div className=\"fixed-action-btn\">\n          <button className=\"btn-floating tooltipped red pulse\" data-position=\"left\" data-tooltip=\"Click map to give location\">\n            !\n          </button>\n        </div>}\n      </div>\n    )\n  }\n}\n\nexport default ChargingExperience",["49","50"],"/home/antreas/Hardeng/front-end/src/UserInfo.js",[],"/home/antreas/Hardeng/front-end/src/Payment.js",[],"/home/antreas/Hardeng/front-end/src/EditUserInfo.js",["51","52","53","54","55"],"/home/antreas/Hardeng/front-end/src/Header.js",[],"/home/antreas/Hardeng/front-end/src/API.js",["56","57"],"/home/antreas/Hardeng/front-end/src/Map.js",["58","59","60","61"],"/home/antreas/Hardeng/front-end/src/EnergyMonitoring.js",["62","63","64","65","66","67"],"/home/antreas/Hardeng/front-end/src/LoginForm.js",["68"],"/home/antreas/Hardeng/front-end/src/Home.js",["69","70"],"/home/antreas/Hardeng/front-end/src/index.js",[],{"ruleId":"71","severity":1,"message":"72","line":40,"column":7,"nodeType":"73","messageId":"74","endLine":40,"endColumn":24},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"71","severity":1,"message":"79","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"71","severity":1,"message":"80","line":4,"column":13,"nodeType":"73","messageId":"74","endLine":4,"endColumn":18},{"ruleId":"71","severity":1,"message":"81","line":8,"column":7,"nodeType":"73","messageId":"74","endLine":8,"endColumn":23},{"ruleId":"82","severity":1,"message":"83","line":43,"column":29,"nodeType":"84","messageId":"85","endLine":43,"endColumn":31},{"ruleId":"71","severity":1,"message":"86","line":94,"column":11,"nodeType":"73","messageId":"74","endLine":94,"endColumn":20},{"ruleId":"71","severity":1,"message":"87","line":5,"column":7,"nodeType":"73","messageId":"74","endLine":5,"endColumn":17},{"ruleId":"71","severity":1,"message":"88","line":39,"column":7,"nodeType":"73","messageId":"74","endLine":39,"endColumn":13},{"ruleId":"71","severity":1,"message":"89","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":16},{"ruleId":"71","severity":1,"message":"90","line":4,"column":50,"nodeType":"73","messageId":"74","endLine":4,"endColumn":62},{"ruleId":"71","severity":1,"message":"91","line":40,"column":20,"nodeType":"73","messageId":"74","endLine":40,"endColumn":31},{"ruleId":"71","severity":1,"message":"86","line":149,"column":11,"nodeType":"73","messageId":"74","endLine":149,"endColumn":20},{"ruleId":"71","severity":1,"message":"92","line":19,"column":7,"nodeType":"73","messageId":"74","endLine":19,"endColumn":11},{"ruleId":"71","severity":1,"message":"81","line":68,"column":7,"nodeType":"73","messageId":"74","endLine":68,"endColumn":23},{"ruleId":"71","severity":1,"message":"72","line":74,"column":7,"nodeType":"73","messageId":"74","endLine":74,"endColumn":24},{"ruleId":"71","severity":1,"message":"86","line":189,"column":9,"nodeType":"73","messageId":"74","endLine":189,"endColumn":18},{"ruleId":"82","severity":1,"message":"93","line":205,"column":58,"nodeType":"84","messageId":"85","endLine":205,"endColumn":60},{"ruleId":"94","severity":1,"message":"95","line":510,"column":21,"nodeType":"96","endLine":510,"endColumn":98},{"ruleId":"71","severity":1,"message":"97","line":2,"column":9,"nodeType":"73","messageId":"74","endLine":2,"endColumn":17},{"ruleId":"71","severity":1,"message":"79","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"98","line":39,"column":23,"nodeType":"96","endLine":39,"endColumn":62},"no-unused-vars","'stationsHardcoded' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["99"],"no-negated-in-lhs",["100"],"'useState' is defined but never used.","'toast' is defined but never used.","'driversHardcoded' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'instances' is assigned a value but never used.","'httpsAgent' is assigned a value but never used.","'config' is assigned a value but never used.","'UserInfo' is defined but never used.","'useMapEvents' is defined but never used.","'setPosition' is assigned a value but never used.","'data' is assigned a value but never used.","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Redirect' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]