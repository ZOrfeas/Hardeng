[{"/home/antreas/Hardeng/front-end/src/ChargingExperience.js":"1","/home/antreas/Hardeng/front-end/src/Map.js":"2","/home/antreas/Hardeng/front-end/src/EnergyMonitoring.js":"3","/home/antreas/Hardeng/front-end/src/Home.js":"4"},{"size":13491,"mtime":1615407972162,"results":"5","hashOfConfig":"6"},{"size":8323,"mtime":1615450234400,"results":"7","hashOfConfig":"6"},{"size":25295,"mtime":1615558795742,"results":"8","hashOfConfig":"6"},{"size":3288,"mtime":1615407972165,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hl5qnz",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/antreas/Hardeng/front-end/src/ChargingExperience.js",[],"/home/antreas/Hardeng/front-end/src/Map.js",["19","20"],"import React, { useState } from 'react';\nimport UserInfo from './UserInfo';\nimport M from 'materialize-css';\nimport { MapContainer, TileLayer, Marker, Popup, useMapEvents } from 'react-leaflet'\nimport L from 'leaflet'\nimport { getAdminStations,updateAdminStation } from './API';\nimport 'leaflet/dist/leaflet.css';\nimport \"./Map.css\";\n\nimport icon from 'leaflet/dist/images/marker-icon.png';\nimport iconRetina from 'leaflet/dist/images/marker-icon-2x.png';\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\nimport person from './icons/black-marker.png';\n\n\nvar locationIcon = L.icon({\n  iconUrl: person,\n  shadowUrl: iconShadow,\n  iconSize: [36, 36],\n  iconAnchor: [18, 36]\n});\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  iconRetinaUrl: iconRetina,\n  shadowUrl: iconShadow,\n  iconSize: [24, 36],\n  iconAnchor: [12, 36]\n});\nL.Marker.prototype.options.icon = DefaultIcon;\n\nconst Athens = [37.983810, 23.727539];\n\nconst stationsHardcoded = [\n  { Longitude:37.983810, Latitude: 23.727539, AddressLine: \"Athens\", time: \"10 minutes\", condition: \"Available\" },\n  {  Longitude:40.629269, Latitude: 22.947412, AddressLine: \"Thessaloniki\", time: \"5 minutes\", condition: \"Maintenance\" }\n];\n\nfunction LocationMarker(props) {\n  const [position, setPosition] = useState(null)\n  const map = useMapEvents({\n    click() {\n      map.locate();\n    },\n\n    locationfound(e) {\n      setPosition(e.latlng);\n      props.setter(e.latlng);\n      map.flyTo(e.latlng, map.getZoom());\n    },\n  })\n\n  return position === null ? null : (\n    <Marker position={position} icon={locationIcon}>\n      <Popup>You are here</Popup>\n    </Marker>\n  )\n}\n\nclass Map extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      adminKey: localStorage.getItem(\"adminKey\"),\n      adminID: localStorage.getItem(\"adminID\"),\n      stationID: null,\n      stations: stationsHardcoded,\n      currentPos: null,\n      chosenIndex: null,\n      zoom: 3,\n      error: null,\n      btnIndex: true,\n      address: null,\n      chargingPoints: null,\n      providerID: null,\n      lat: null,\n      lot: null,\n    };\n    this.setState({\n      username: \"\"  \n    })\n    this.submitChanges = this.submitChanges.bind(this);\n    this.showMarkers = this.showMarkers.bind(this);\n    this.handleLocation = this.handleLocation.bind(this);\n    this.showOptions = this.showOptions.bind(this);\n    this.handleSelect = this.handleSelect.bind(this);\n    this.handleUserInput = this.handleUserInput.bind(this);\n    this.enableButton = this.enableButton.bind(this);\n    this.handleUserInputAddress = this.handleUserInputAddress.bind(this);\n    this.handleUserInputProviderID = this.handleUserInputProviderID.bind(this);\n  }\n\n  handleUserInput(e) {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({ [name]: value });\n  }\n\n  showMarkers() {\n    var i = this.state.chosenIndex;\n\n    if (i === null) {\n      return (this.state.stations.map(({ Longitude, Latitude, AddressLine }, index) => <Marker key={index} value={AddressLine} position={[Latitude,Longitude]}></Marker>));\n    }\n    else {\n      var station = this.state.stations[i];\n      return (<Marker key={i} value={station.AddressLine} position={[station.Latitude,station.Longitude]}></Marker>);\n    }\n  }\n\n  showOptions() {\n    return (\n      this.state.stations.map(({ Longitude, Latitude, AddressLine }, index) => <option value={index}> {AddressLine} </option>)\n    );\n  }\n\n  handleSelect(e) {\n    e.target.value === \"all\" ? this.setState({ chosenIndex: null }) : this.setState({ chosenIndex: e.target.value });\n    console.log(e.target.value)\n    console.log(this.state.stations[e.target.value][\"AddressLine\"])\n    console.log(this.state.stations[e.target.value][\"TotalChargingPoints\"])\n    this.setState({address: this.state.stations[e.target.value][\"AddressLine\"]})\n    this.setState({chargingPoints: this.state.stations[e.target.value][\"TotalChargingPoints\"]})\n    this.setState({providerID: this.state.stations[e.target.value][\"EnergyProviderID\"]})\n    this.setState({lot: this.state.stations[e.target.value][\"Longitude\"]})\n    this.setState({lat: this.state.stations[e.target.value][\"Latitude\"]})\n    this.setState({stationID: this.state.stations[e.target.value][\"StationID\"]})\n  }\n\n  handleLocation(latlng) {\n    this.setState({\n      currentPos: latlng\n    } \n    );\n}\n\n  componentDidMount() {\n    document.addEventListener('DOMContentLoaded', function() {\n      var elems = document.querySelectorAll('.dropdown-trigger');\n      var instances = M.Dropdown.init(elems, {});\n    });\n\n    // M.AutoInit();\n\n    getAdminStations(this.state.adminKey,this.state.adminID)\n    .then(res => {\n      console.log(res)\n      this.setState({stations: res.data})\n    })\n    .catch(() => {\n  \n    })\n\n  }\n\n  submitChanges(){\n    if (window.confirm(\"U sur?????\")) {\n      const obj = {\n      \"lat\" : this.state.lat,\n      \"lon\" : this.state.lot,\n      \"address\" : this.state.address,\n      \"adminId\" : this.state.adminID,\n      \"providerId\" : this.state.providerID,\n      }\n      updateAdminStation(this.state.adminKey,this.state.stationID,obj)\n      .then(res => {\n        console.log(res)\n        window.location.reload();\n      })\n      .catch(error => {\n        console.log(error.response)\n      })\n    } \n    else {\n        //do nothing\n    }\n  }\n\n  enableButton(){\n    this.setState({btnIndex: false});\n  }\n\n  handleUserInputProviderID (e){\n    this.setState({btnIndex: false});\n    this.setState({providerID: e.target.value})\n  }\n\n  handleUserInputAddress (e){\n    this.setState({btnIndex: false});\n    this.setState({address: e.target.value})\n  }\n\n  render(){\n    return(\n      <div>\n        <div className=\"row\">\n          <div className=\"col s9 right align\">\n            <div className=\"card hoverable\">\n                <MapContainer\n                  className=\"map\"\n                  center={Athens}\n                  zoom={this.state.zoom}\n                >\n                  <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                  />\n                  {this.showMarkers()}\n                  <LocationMarker setter={this.handleLocation} />\n                </MapContainer>\n                <form>\n                    <select className=\"browser-default\" onChange={this.handleSelect}>\n                      <option value=\"\" disabled selected>Choose station ...</option>\n                      <option value=\"all\">Show all stations</option>\n                      {this.showOptions()}\n                    </select>\n                  </form>\n            </div>\n          </div>\n          <div className=\"col s3 m3\">\n            <div className=\"card blue-grey darken-1\" >\n              <div className=\"card-content white-text\">\n                <span className=\"card-title\">Charging Station's Info</span>\n              </div>\n              <div className=\"card-action\">\n                <div class=\"input-field col s12 right align\">\n                  <input placeholder=\"Address\" id=\"station_address\" value ={this.state.address} type=\"text\" class=\"validate\" onChange={this.handleUserInputAddress}/>\n                  <label for=\"station_address\">  </label>\n                </div> \n                <div class=\"input-field col s12 right align\">\n                  <input placeholder=\"Charging Points\" id=\"station_charging_points\" value={this.state.chargingPoints} type=\"text\" class=\"validate\"/>\n                  <label for=\"station_charging_points\">  </label>\n                </div> \n                <div class=\"input-field col s12 right align\">\n                  <input placeholder=\"Energy Provider ID\" id=\"provider_id\" value={this.state.providerID} type=\"text\" class=\"validate\" onChange={this.handleUserInputProviderID}/>\n                  <label for=\"provider_id\"> </label>\n                </div> \n              </div>\n              <div className=\"right-align\">\n                <button className=\"waves-effect waves-light btn modal-trigger\" type=\"submit\" name=\"action\" id=\"sumbit-changes\" onClick={this.submitChanges} disabled={this.state.btnIndex}>Save Changes \n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  \n}\n\nexport default Map","/home/antreas/Hardeng/front-end/src/EnergyMonitoring.js",["21","22","23","24","25","26"],"/home/antreas/Hardeng/front-end/src/Home.js",["27","28","29","30","31","32","33","34"],{"ruleId":"35","severity":1,"message":"36","line":2,"column":8,"nodeType":"37","messageId":"38","endLine":2,"endColumn":16},{"ruleId":"35","severity":1,"message":"39","line":141,"column":11,"nodeType":"37","messageId":"38","endLine":141,"endColumn":20},{"ruleId":"35","severity":1,"message":"40","line":19,"column":7,"nodeType":"37","messageId":"38","endLine":19,"endColumn":11},{"ruleId":"35","severity":1,"message":"41","line":68,"column":7,"nodeType":"37","messageId":"38","endLine":68,"endColumn":23},{"ruleId":"35","severity":1,"message":"42","line":74,"column":7,"nodeType":"37","messageId":"38","endLine":74,"endColumn":24},{"ruleId":"35","severity":1,"message":"39","line":189,"column":9,"nodeType":"37","messageId":"38","endLine":189,"endColumn":18},{"ruleId":"43","severity":1,"message":"44","line":205,"column":58,"nodeType":"45","messageId":"46","endLine":205,"endColumn":60},{"ruleId":"47","severity":1,"message":"48","line":510,"column":21,"nodeType":"49","endLine":510,"endColumn":98},{"ruleId":"35","severity":1,"message":"50","line":1,"column":17,"nodeType":"37","messageId":"38","endLine":1,"endColumn":25},{"ruleId":"35","severity":1,"message":"51","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":9},{"ruleId":"35","severity":1,"message":"52","line":5,"column":8,"nodeType":"37","messageId":"38","endLine":5,"endColumn":9},{"ruleId":"35","severity":1,"message":"53","line":5,"column":13,"nodeType":"37","messageId":"38","endLine":5,"endColumn":25},{"ruleId":"35","severity":1,"message":"54","line":6,"column":10,"nodeType":"37","messageId":"38","endLine":6,"endColumn":23},{"ruleId":"35","severity":1,"message":"55","line":7,"column":10,"nodeType":"37","messageId":"38","endLine":7,"endColumn":21},{"ruleId":"35","severity":1,"message":"56","line":8,"column":8,"nodeType":"37","messageId":"38","endLine":8,"endColumn":11},{"ruleId":"47","severity":1,"message":"57","line":44,"column":23,"nodeType":"49","endLine":44,"endColumn":62},"no-unused-vars","'UserInfo' is defined but never used.","Identifier","unusedVar","'instances' is assigned a value but never used.","'data' is assigned a value but never used.","'driversHardcoded' is assigned a value but never used.","'stationsHardcoded' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'L' is defined but never used.","'M' is defined but never used.","'Autocomplete' is defined but never used.","'AiOutlineSend' is defined but never used.","'getStations' is defined but never used.","'Map' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md"]